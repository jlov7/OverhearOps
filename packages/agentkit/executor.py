"""Executor synthesising dry-run artefacts for a plan."""

from __future__ import annotations

from datetime import UTC, datetime
from typing import Any

from packages.obs.defence import run_defence


def _render_pr_diff(plan: dict[str, Any]) -> str:
    plan_id = plan.get("id", "unknown")
    title = plan.get("title", "Investigate incident")
    steps = plan.get("steps", [])
    if not isinstance(steps, list):
        steps = list(steps) if hasattr(steps, "__iter__") else []
    body_lines = "\n".join(f"+ # {step}" for step in steps)
    return (
        "diff --git a/tests/integration/test_artifacts.py b/tests/integration/test_artifacts.py\n"
        "--- a/tests/integration/test_artifacts.py\n"
        "+++ b/tests/integration/test_artifacts.py\n"
        "@@\n"
        f"+# Plan: {title} ({plan_id})\n"
        f"{body_lines}\n"
        "+# NOTE: Generated by OverhearOps demo\n"
    )


def _render_jira(plan: dict[str, Any]) -> dict[str, Any]:
    now = datetime.now(UTC).isoformat()
    steps = plan.get("steps", [])
    if not isinstance(steps, list):
        steps = list(steps) if hasattr(steps, "__iter__") else []
    return {
        "summary": f"[Dry Run] {plan.get('title', 'Investigate incident')}",
        "description": "\n".join(
            [
                f"Hypothesis: {plan.get('hypothesis', 'Triage incident')}",
                f"Blast radius: {plan.get('blast_radius', 'Unknown')}",
                "Steps:",
                *[f"- {step}" for step in steps],
            ]
        ),
        "labels": ["overhearops", plan.get("id", "plan-unknown")],
        "generated_at": now,
    }


def try_patch_or_issue(plan: dict[str, Any]) -> dict[str, Any]:
    """Produce artefacts for the chosen plan (stubbed for demo)."""

    safe_plan = plan if isinstance(plan, dict) else {}
    steps = safe_plan.get("steps", [])
    if not isinstance(steps, list):
        steps = list(steps) if hasattr(steps, "__iter__") else []
    signal = " ".join(
        filter(
            None,
            [
                safe_plan.get("title"),
                safe_plan.get("hypothesis"),
                *[step for step in steps if isinstance(step, str)],
            ],
        )
    )
    decision = run_defence(signal)
    notes = [
        "Team coverage: coordinator, fixer, critic, riskguard",
        f"Confidence estimate: {safe_plan.get('confidence', 0.0):.2f}",
        f"Safety guard: {decision.justification}",
    ]
    if not safe_plan:
        notes.append("No plan selected")
    artefacts = {
        "plan": safe_plan,
        "pr_diff": "",
        "jira": {},
        "notes": notes,
        "safety": {
            "allowed": decision.allowed,
            "categories": decision.categories,
            "score": decision.score,
            "justification": decision.justification,
        },
    }
    if safe_plan and decision.allowed:
        artefacts["pr_diff"] = _render_pr_diff(safe_plan)
        artefacts["jira"] = _render_jira(safe_plan)
    return artefacts


__all__ = ["try_patch_or_issue"]
